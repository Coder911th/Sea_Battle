{"version":3,"sources":["game.js"],"names":["seaBattle","COLLISION_MESSAGE","ships","$myField","$","$report","find","filter","each","index","x","data","y","Math","floor","prepareShips","readyState","undefined","$td","toggleClass","checkShipsValid","on","checkShipCorrect","checked","cells","offsetX","offsetY","html","text","fail","outerCycle","removeClass","prop","addClass"],"mappings":"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","file":"../../js/game.js","sourcesContent":["void function(seaBattle) {\r\n\r\n    /**** Для морского боя ****/\r\n\r\n    const \r\n        COLLISION_MESSAGE = 'Обнаружено столкновение кораблей!<br> ' +\r\n        'Все корабли должны быть прямыми и вокруг каждого корабля должно ' +\r\n        'быть пространство хотя бы в одну ячейку.'\r\n\r\n    let \r\n        ships = [, 0, 0, 0, 0],\r\n\r\n        /* Обёртка над мои игровым полем */\r\n        $myField = $('.game-page .my.field'),\r\n        /* Место для отчета об ошибках валидации кораблей */\r\n        $report = $('.validation-message');\r\n\r\n    /* Связываем DOM-ячейки поля с данными */\r\n    $myField\r\n        .find('tr')\r\n        .filter(':gt(0)')\r\n        .find('td')\r\n        .each(function(index) {\r\n            let x = index % 11; // x-координата ячейки\r\n\r\n            if (x == 0) // Самая первая ячейка в каждом ряду - номер ряда\r\n                return;\r\n\r\n            $(this)\r\n                .data({\r\n                    x: x - 1, // Начинаем идексацию не с единицы, а с нуля\r\n                    y: Math.floor(index / 11)\r\n                });\r\n        });\r\n\r\n    // Аналогично для поля противника\r\n    $('.enemy.field')\r\n        .find('tr')\r\n        .filter(':gt(0)')\r\n        .find('td')\r\n        .each(function(index) {\r\n            let x = index % 11; // x-координата ячейки\r\n\r\n            if (x == 0) // Самая первая ячейка в каждом ряду - номер ряда\r\n                return;\r\n\r\n            $(this)\r\n                .data({\r\n                    x: x - 1, // Начинаем идексацию не с единицы, а с нуля\r\n                    y: Math.floor(index / 11)\r\n                });\r\n        });\r\n\r\n    // Обработчик установки и удаления уже размещенных кораблей\r\n    function prepareShips() {\r\n\r\n        if (seaBattle.readyState) // Зафиксировали изменения, ждём\r\n            return;\r\n\r\n        // Кликнули по подписям к строкам и столбцам таблицы\r\n        if ($(this).data('x') == undefined)\r\n            return;\r\n\r\n        let \r\n            $td = $(this),\r\n            x = $td.data('x'),\r\n            y = $td.data('y');\r\n        \r\n        $td.toggleClass('ship');\r\n        seaBattle.ships[x][y] = !seaBattle.ships[x][y];\r\n        checkShipsValid();\r\n    }\r\n    \r\n    $myField\r\n        .on('click', 'td', prepareShips);\r\n\r\n    //Процедура проверки корректности расположения корабля\r\n    function checkShipCorrect(x, y, checked) {\r\n        /* \r\n            Правильным кораблём будет только такой корабль,\r\n            у которого изменяется только одна из координат на всём его протяжении,\r\n            причём нужно двигаться из текущей позиции только вправо или вниз, т.к.\r\n            корабли в остальных направлениях уже проверены\r\n        */\r\n\r\n        let [cells, offsetX, offsetY] = [1, 1, 1];\r\n\r\n        if (seaBattle.ships[x + 1][y]) {\r\n            // Если справа что-то есть, двигаемся туда\r\n            while (offsetX + x < 10 && seaBattle.ships[x + offsetX][y]) {\r\n\r\n                // Проверяем коллизию снизу\r\n                if (\r\n                    checked[x + offsetX][y] || \r\n                    seaBattle.ships[x + offsetX][y + 1]\r\n                ) {\r\n                    $report.html(COLLISION_MESSAGE);\r\n                    return false;\r\n                }\r\n\r\n                checked[x + offsetX][y] = true;\r\n                cells++;\r\n                offsetX++;\r\n            }\r\n\r\n        } \r\n        \r\n        if (seaBattle.ships[x][y + 1]) {\r\n            if (offsetX > 1) {\r\n                $report.html(COLLISION_MESSAGE);\r\n                return false;\r\n            }\r\n\r\n            // Снизу что-то есть\r\n            while (offsetY + y < 10 && seaBattle.ships[x][y + offsetY]) {\r\n\r\n                // Проверяем коллизию справа\r\n                if (\r\n                    checked[x][y + offsetY] ||\r\n                    seaBattle.ships[x + 1][y + offsetY]\r\n                ) {\r\n                    $report.html(COLLISION_MESSAGE);\r\n                    return false;\r\n                }\r\n\r\n                checked[x][y + offsetY] = true;\r\n                cells++;\r\n                offsetY++;\r\n            }\r\n        }\r\n\r\n        // Проверка коллизии по двум нижним углам\r\n        if (seaBattle.ships[x - 1][y + offsetY] || seaBattle.ships[x + offsetX][y + offsetY]) {\r\n            $report.html(COLLISION_MESSAGE);\r\n            return false;\r\n        }\r\n        \r\n\r\n        if (cells > 4) {\r\n            $report.text(`Обнаружен корабль, создаящий более, чем из 4х палуб!`);\r\n            return false;\r\n        }\r\n\r\n        ships[cells]++;\r\n        return true;\r\n    }\r\n\r\n    // Проверка валидации расположения кораблей\r\n    function checkShipsValid() {\r\n        // Матрица проверенных ячеек (если true, то проверено)\r\n        let checked = [[], [], [], [], [], [], [], [], [], []];\r\n        checked['-1'] = checked['10'] = seaBattle.ships['-1'] = seaBattle.ships['10'] = [];\r\n\r\n        // Обнуляем счётчики кораблей\r\n        ships = [, 0, 0, 0, 0];\r\n            \r\n        // Результат валидации\r\n        let fail = false;\r\n\r\n        outerCycle: for (let x = 0; x < 10; x++)\r\n            for (let y = 0; y < 10; y++) {\r\n                if (!checked[x][y] && seaBattle.ships[x][y])\r\n                    if ( !checkShipCorrect(x, y, checked) ) {\r\n                        // Проверка корабля завершилась неудачно\r\n                        fail = true;\r\n                        break outerCycle;\r\n                    }\r\n\r\n                checked[x][y] = true;\r\n            }\r\n\r\n        if (fail) {\r\n            $report.removeClass('success');\r\n            $('#ready').prop('disabled', true); // Выключаем кнопкку \"ГОТОВ\"\r\n            return;\r\n        }\r\n\r\n        // Выводим информацию о количестве обнаруженных кораблей\r\n        $('#one')\r\n        .text(ships[1]);\r\n        \r\n        $('#two')\r\n            .text(ships[2]);\r\n        \r\n        $('#three')\r\n            .text(ships[3]);\r\n        \r\n        $('#four')\r\n            .text(ships[4]);\r\n\r\n        if (ships[1] == 4 && ships[2] == 3 && ships[3] == 2 && ships[4] == 1) {\r\n            $report\r\n                .text('Ваш флот готов!')\r\n                .addClass('success');\r\n            \r\n            $('#ready') // Включаем кнопкку \"ГОТОВ\"\r\n                .prop('disabled', false);\r\n        } else {\r\n            $report.removeClass('success');\r\n            $('#ready').prop('disabled', true);\r\n            \r\n            if (ships[1] > 4 || ships[2] > 3 || ships[3] > 2 || ships[4] > 1)\r\n                $report.text('Обнаружен лишний корабль!');\r\n            else\r\n                $report.text('Расставьте все свои корабли!');\r\n        }\r\n    }\r\n\r\n}(seaBattle);"]}